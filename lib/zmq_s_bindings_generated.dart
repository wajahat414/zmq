// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/zmq_s.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
///
///
class ZmqBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ///
  ZmqBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ZmqBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Run-time API version detection
  void zmq_version(
    ffi.Pointer<ffi.Int> major,
    ffi.Pointer<ffi.Int> minor,
    ffi.Pointer<ffi.Int> patch,
  ) {
    return _zmq_version(
      major,
      minor,
      patch,
    );
  }

  late final _zmq_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('zmq_version');
  late final _zmq_version = _zmq_versionPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  /// This function retrieves the errno as it is known to 0MQ library. The goal */
  /// /*  of this function is to make the code 100% portable, including where 0MQ   */
  /// /*  compiled with certain CRT library (on Windows) is linked to an            */
  /// /*  application that uses different CRT library.
  int zmq_errno() {
    return _zmq_errno();
  }

  late final _zmq_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('zmq_errno');
  late final _zmq_errno = _zmq_errnoPtr.asFunction<int Function()>();

  /// Resolves system errors and 0MQ errors to human-readable string.
  ffi.Pointer<ffi.Char> zmq_strerror(
    int errnum,
  ) {
    return _zmq_strerror(
      errnum,
    );
  }

  late final _zmq_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'zmq_strerror');
  late final _zmq_strerror =
      _zmq_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Void> zmq_ctx_new() {
    return _zmq_ctx_new();
  }

  late final _zmq_ctx_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'zmq_ctx_new');
  late final _zmq_ctx_new =
      _zmq_ctx_newPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int zmq_ctx_term(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _zmq_ctx_term(
      context,
    );
  }

  late final _zmq_ctx_termPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_term');
  late final _zmq_ctx_term =
      _zmq_ctx_termPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_shutdown(
    ffi.Pointer<ffi.Void> ctx_,
  ) {
    return _zmq_ctx_shutdown(
      ctx_,
    );
  }

  late final _zmq_ctx_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_shutdown');
  late final _zmq_ctx_shutdown =
      _zmq_ctx_shutdownPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_set(
    ffi.Pointer<ffi.Void> context,
    int option,
    int optval,
  ) {
    return _zmq_ctx_set(
      context,
      option,
      optval,
    );
  }

  late final _zmq_ctx_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('zmq_ctx_set');
  late final _zmq_ctx_set = _zmq_ctx_setPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_ctx_get(
    ffi.Pointer<ffi.Void> context,
    int option,
  ) {
    return _zmq_ctx_get(
      context,
      option,
    );
  }

  late final _zmq_ctx_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'zmq_ctx_get');
  late final _zmq_ctx_get =
      _zmq_ctx_getPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// Old (legacy) API
  ffi.Pointer<ffi.Void> zmq_init(
    int io_threads,
  ) {
    return _zmq_init(
      io_threads,
    );
  }

  late final _zmq_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'zmq_init');
  late final _zmq_init =
      _zmq_initPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int zmq_term(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _zmq_term(
      context,
    );
  }

  late final _zmq_termPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_term');
  late final _zmq_term =
      _zmq_termPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_destroy(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _zmq_ctx_destroy(
      context,
    );
  }

  late final _zmq_ctx_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_destroy');
  late final _zmq_ctx_destroy =
      _zmq_ctx_destroyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_msg_init(
    ffi.Pointer<zmq_msg_t> msg,
  ) {
    return _zmq_msg_init(
      msg,
    );
  }

  late final _zmq_msg_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_init');
  late final _zmq_msg_init =
      _zmq_msg_initPtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_init_size(
    ffi.Pointer<zmq_msg_t> msg,
    int size,
  ) {
    return _zmq_msg_init_size(
      msg,
      size,
    );
  }

  late final _zmq_msg_init_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Size)>>('zmq_msg_init_size');
  late final _zmq_msg_init_size = _zmq_msg_init_sizePtr
      .asFunction<int Function(ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_msg_init_data(
    ffi.Pointer<zmq_msg_t> msg,
    ffi.Pointer<ffi.Void> data,
    int size,
    ffi.Pointer<zmq_free_fn> ffn,
    ffi.Pointer<ffi.Void> hint,
  ) {
    return _zmq_msg_init_data(
      msg,
      data,
      size,
      ffn,
      hint,
    );
  }

  late final _zmq_msg_init_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<zmq_free_fn>,
              ffi.Pointer<ffi.Void>)>>('zmq_msg_init_data');
  late final _zmq_msg_init_data = _zmq_msg_init_dataPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<zmq_free_fn>, ffi.Pointer<ffi.Void>)>();

  int zmq_msg_send(
    ffi.Pointer<zmq_msg_t> msg,
    ffi.Pointer<ffi.Void> s,
    int flags,
  ) {
    return _zmq_msg_send(
      msg,
      s,
      flags,
    );
  }

  late final _zmq_msg_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('zmq_msg_send');
  late final _zmq_msg_send = _zmq_msg_sendPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int)>();

  int zmq_msg_recv(
    ffi.Pointer<zmq_msg_t> msg,
    ffi.Pointer<ffi.Void> s,
    int flags,
  ) {
    return _zmq_msg_recv(
      msg,
      s,
      flags,
    );
  }

  late final _zmq_msg_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('zmq_msg_recv');
  late final _zmq_msg_recv = _zmq_msg_recvPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int)>();

  int zmq_msg_close(
    ffi.Pointer<zmq_msg_t> msg,
  ) {
    return _zmq_msg_close(
      msg,
    );
  }

  late final _zmq_msg_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_close');
  late final _zmq_msg_close =
      _zmq_msg_closePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_move(
    ffi.Pointer<zmq_msg_t> dest,
    ffi.Pointer<zmq_msg_t> src,
  ) {
    return _zmq_msg_move(
      dest,
      src,
    );
  }

  late final _zmq_msg_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>>('zmq_msg_move');
  late final _zmq_msg_move = _zmq_msg_movePtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_copy(
    ffi.Pointer<zmq_msg_t> dest,
    ffi.Pointer<zmq_msg_t> src,
  ) {
    return _zmq_msg_copy(
      dest,
      src,
    );
  }

  late final _zmq_msg_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>>('zmq_msg_copy');
  late final _zmq_msg_copy = _zmq_msg_copyPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>();

  ffi.Pointer<ffi.Void> zmq_msg_data(
    ffi.Pointer<zmq_msg_t> msg,
  ) {
    return _zmq_msg_data(
      msg,
    );
  }

  late final _zmq_msg_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<zmq_msg_t>)>>('zmq_msg_data');
  late final _zmq_msg_data = _zmq_msg_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_size(
    ffi.Pointer<zmq_msg_t> msg,
  ) {
    return _zmq_msg_size(
      msg,
    );
  }

  late final _zmq_msg_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_size');
  late final _zmq_msg_size =
      _zmq_msg_sizePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_more(
    ffi.Pointer<zmq_msg_t> msg,
  ) {
    return _zmq_msg_more(
      msg,
    );
  }

  late final _zmq_msg_morePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_more');
  late final _zmq_msg_more =
      _zmq_msg_morePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_get(
    ffi.Pointer<zmq_msg_t> msg,
    int option,
  ) {
    return _zmq_msg_get(
      msg,
      option,
    );
  }

  late final _zmq_msg_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Int)>>('zmq_msg_get');
  late final _zmq_msg_get =
      _zmq_msg_getPtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_msg_set(
    ffi.Pointer<zmq_msg_t> msg,
    int option,
    int optval,
  ) {
    return _zmq_msg_set(
      msg,
      option,
      optval,
    );
  }

  late final _zmq_msg_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Int, ffi.Int)>>('zmq_msg_set');
  late final _zmq_msg_set = _zmq_msg_setPtr
      .asFunction<int Function(ffi.Pointer<zmq_msg_t>, int, int)>();

  ffi.Pointer<ffi.Void> zmq_socket(
    ffi.Pointer<ffi.Void> arg0,
    int type,
  ) {
    return _zmq_socket(
      arg0,
      type,
    );
  }

  late final _zmq_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('zmq_socket');
  late final _zmq_socket = _zmq_socketPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int zmq_close(
    ffi.Pointer<ffi.Void> s,
  ) {
    return _zmq_close(
      s,
    );
  }

  late final _zmq_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_close');
  late final _zmq_close =
      _zmq_closePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_setsockopt(
    ffi.Pointer<ffi.Void> s,
    int option,
    ffi.Pointer<ffi.Void> optval,
    int optvallen,
  ) {
    return _zmq_setsockopt(
      s,
      option,
      optval,
      optvallen,
    );
  }

  late final _zmq_setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('zmq_setsockopt');
  late final _zmq_setsockopt = _zmq_setsockoptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  int zmq_getsockopt(
    ffi.Pointer<ffi.Void> s,
    int option,
    ffi.Pointer<ffi.Void> optval,
    ffi.Pointer<ffi.Size> optvallen,
  ) {
    return _zmq_getsockopt(
      s,
      option,
      optval,
      optvallen,
    );
  }

  late final _zmq_getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('zmq_getsockopt');
  late final _zmq_getsockopt = _zmq_getsockoptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int zmq_bind(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _zmq_bind(
      s,
      addr,
    );
  }

  late final _zmq_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_bind');
  late final _zmq_bind = _zmq_bindPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_connect(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _zmq_connect(
      s,
      addr,
    );
  }

  late final _zmq_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_connect');
  late final _zmq_connect = _zmq_connectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_unbind(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _zmq_unbind(
      s,
      addr,
    );
  }

  late final _zmq_unbindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_unbind');
  late final _zmq_unbind = _zmq_unbindPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_disconnect(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _zmq_disconnect(
      s,
      addr,
    );
  }

  late final _zmq_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_disconnect');
  late final _zmq_disconnect = _zmq_disconnectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_send(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Void> buf,
    int len,
    int flags,
  ) {
    return _zmq_send(
      s,
      buf,
      len,
      flags,
    );
  }

  late final _zmq_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_send');
  late final _zmq_send = _zmq_sendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_send_const(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Void> buf,
    int len,
    int flags,
  ) {
    return _zmq_send_const(
      s,
      buf,
      len,
      flags,
    );
  }

  late final _zmq_send_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_send_const');
  late final _zmq_send_const = _zmq_send_constPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_recv(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Void> buf,
    int len,
    int flags,
  ) {
    return _zmq_recv(
      s,
      buf,
      len,
      flags,
    );
  }

  late final _zmq_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_recv');
  late final _zmq_recv = _zmq_recvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_socket_monitor(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Char> addr,
    int events,
  ) {
    return _zmq_socket_monitor(
      s,
      addr,
      events,
    );
  }

  late final _zmq_socket_monitorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('zmq_socket_monitor');
  late final _zmq_socket_monitor = _zmq_socket_monitorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int zmq_sendmsg(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<zmq_msg_t> msg,
    int flags,
  ) {
    return _zmq_sendmsg(
      s,
      msg,
      flags,
    );
  }

  late final _zmq_sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>,
              ffi.Int)>>('zmq_sendmsg');
  late final _zmq_sendmsg = _zmq_sendmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_recvmsg(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<zmq_msg_t> msg,
    int flags,
  ) {
    return _zmq_recvmsg(
      s,
      msg,
      flags,
    );
  }

  late final _zmq_recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>,
              ffi.Int)>>('zmq_recvmsg');
  late final _zmq_recvmsg = _zmq_recvmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_sendiov(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<iovec> iov,
    int count,
    int flags,
  ) {
    return _zmq_sendiov(
      s,
      iov,
      count,
      flags,
    );
  }

  late final _zmq_sendiovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>, ffi.Size,
              ffi.Int)>>('zmq_sendiov');
  late final _zmq_sendiov = _zmq_sendiovPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>, int, int)>();

  int zmq_recviov(
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<iovec> iov,
    ffi.Pointer<ffi.Size> count,
    int flags,
  ) {
    return _zmq_recviov(
      s,
      iov,
      count,
      flags,
    );
  }

  late final _zmq_recviovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>,
              ffi.Pointer<ffi.Size>, ffi.Int)>>('zmq_recviov');
  late final _zmq_recviov = _zmq_recviovPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>,
          ffi.Pointer<ffi.Size>, int)>();

  int zmq_poll(
    ffi.Pointer<zmq_pollitem_t> items,
    int nitems,
    int timeout,
  ) {
    return _zmq_poll(
      items,
      nitems,
      timeout,
    );
  }

  late final _zmq_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_pollitem_t>, ffi.Int, ffi.Long)>>('zmq_poll');
  late final _zmq_poll = _zmq_pollPtr
      .asFunction<int Function(ffi.Pointer<zmq_pollitem_t>, int, int)>();

  /// Built-in message proxy (3-way)
  int zmq_proxy(
    ffi.Pointer<ffi.Void> frontend,
    ffi.Pointer<ffi.Void> backend,
    ffi.Pointer<ffi.Void> capture,
  ) {
    return _zmq_proxy(
      frontend,
      backend,
      capture,
    );
  }

  late final _zmq_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('zmq_proxy');
  late final _zmq_proxy = _zmq_proxyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  /// Encode a binary key as printable text using ZMQ RFC 32
  ffi.Pointer<ffi.Char> zmq_z85_encode(
    ffi.Pointer<ffi.Char> dest,
    ffi.Pointer<ffi.Uint8> data,
    int size,
  ) {
    return _zmq_z85_encode(
      dest,
      data,
      size,
    );
  }

  late final _zmq_z85_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('zmq_z85_encode');
  late final _zmq_z85_encode = _zmq_z85_encodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Encode a binary key from printable text per ZMQ RFC 32
  ffi.Pointer<ffi.Uint8> zmq_z85_decode(
    ffi.Pointer<ffi.Uint8> dest,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _zmq_z85_decode(
      dest,
      string,
    );
  }

  late final _zmq_z85_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>)>>('zmq_z85_decode');
  late final _zmq_z85_decode = _zmq_z85_decodePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Char>)>();

  /// Deprecated method
  int zmq_device(
    int type,
    ffi.Pointer<ffi.Void> frontend,
    ffi.Pointer<ffi.Void> backend,
  ) {
    return _zmq_device(
      type,
      frontend,
      backend,
    );
  }

  late final _zmq_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('zmq_device');
  late final _zmq_device = _zmq_devicePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
}

/// /
/// /*  0MQ message definition.                                                   */
/// /
final class zmq_msg_t extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> _;
}

typedef zmq_free_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>;

/// Socket event data
final class zmq_event_t extends ffi.Struct {
  /// id of the event as bitfield
  @ffi.Uint16()
  external int event;

  /// value is either error code, fd or reconnect interval
  @ffi.Int32()
  external int value;
}

/// Experimental
final class iovec extends ffi.Opaque {}

final class zmq_pollitem_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> socket;

  @ffi.Int()
  external int fd;

  @ffi.Short()
  external int events;

  @ffi.Short()
  external int revents;
}

const int ZMQ_VERSION_MAJOR = 4;

const int ZMQ_VERSION_MINOR = 0;

const int ZMQ_VERSION_PATCH = 3;

const int ZMQ_VERSION = 40003;

const int ZMQ_HAUSNUMERO = 156384712;

const int EFSM = 156384763;

const int ENOCOMPATPROTO = 156384764;

const int ETERM = 156384765;

const int EMTHREAD = 156384766;

const int ZMQ_IO_THREADS = 1;

const int ZMQ_MAX_SOCKETS = 2;

const int ZMQ_IO_THREADS_DFLT = 1;

const int ZMQ_MAX_SOCKETS_DFLT = 1023;

const int ZMQ_PAIR = 0;

const int ZMQ_PUB = 1;

const int ZMQ_SUB = 2;

const int ZMQ_REQ = 3;

const int ZMQ_REP = 4;

const int ZMQ_DEALER = 5;

const int ZMQ_ROUTER = 6;

const int ZMQ_PULL = 7;

const int ZMQ_PUSH = 8;

const int ZMQ_XPUB = 9;

const int ZMQ_XSUB = 10;

const int ZMQ_STREAM = 11;

const int ZMQ_XREQ = 5;

const int ZMQ_XREP = 6;

const int ZMQ_AFFINITY = 4;

const int ZMQ_IDENTITY = 5;

const int ZMQ_SUBSCRIBE = 6;

const int ZMQ_UNSUBSCRIBE = 7;

const int ZMQ_RATE = 8;

const int ZMQ_RECOVERY_IVL = 9;

const int ZMQ_SNDBUF = 11;

const int ZMQ_RCVBUF = 12;

const int ZMQ_RCVMORE = 13;

const int ZMQ_FD = 14;

const int ZMQ_EVENTS = 15;

const int ZMQ_TYPE = 16;

const int ZMQ_LINGER = 17;

const int ZMQ_RECONNECT_IVL = 18;

const int ZMQ_BACKLOG = 19;

const int ZMQ_RECONNECT_IVL_MAX = 21;

const int ZMQ_MAXMSGSIZE = 22;

const int ZMQ_SNDHWM = 23;

const int ZMQ_RCVHWM = 24;

const int ZMQ_MULTICAST_HOPS = 25;

const int ZMQ_RCVTIMEO = 27;

const int ZMQ_SNDTIMEO = 28;

const int ZMQ_LAST_ENDPOINT = 32;

const int ZMQ_ROUTER_MANDATORY = 33;

const int ZMQ_TCP_KEEPALIVE = 34;

const int ZMQ_TCP_KEEPALIVE_CNT = 35;

const int ZMQ_TCP_KEEPALIVE_IDLE = 36;

const int ZMQ_TCP_KEEPALIVE_INTVL = 37;

const int ZMQ_TCP_ACCEPT_FILTER = 38;

const int ZMQ_IMMEDIATE = 39;

const int ZMQ_XPUB_VERBOSE = 40;

const int ZMQ_ROUTER_RAW = 41;

const int ZMQ_IPV6 = 42;

const int ZMQ_MECHANISM = 43;

const int ZMQ_PLAIN_SERVER = 44;

const int ZMQ_PLAIN_USERNAME = 45;

const int ZMQ_PLAIN_PASSWORD = 46;

const int ZMQ_CURVE_SERVER = 47;

const int ZMQ_CURVE_PUBLICKEY = 48;

const int ZMQ_CURVE_SECRETKEY = 49;

const int ZMQ_CURVE_SERVERKEY = 50;

const int ZMQ_PROBE_ROUTER = 51;

const int ZMQ_REQ_CORRELATE = 52;

const int ZMQ_REQ_RELAXED = 53;

const int ZMQ_CONFLATE = 54;

const int ZMQ_ZAP_DOMAIN = 55;

const int ZMQ_MORE = 1;

const int ZMQ_DONTWAIT = 1;

const int ZMQ_SNDMORE = 2;

const int ZMQ_NULL = 0;

const int ZMQ_PLAIN = 1;

const int ZMQ_CURVE = 2;

const int ZMQ_IPV4ONLY = 31;

const int ZMQ_DELAY_ATTACH_ON_CONNECT = 39;

const int ZMQ_NOBLOCK = 1;

const int ZMQ_FAIL_UNROUTABLE = 33;

const int ZMQ_ROUTER_BEHAVIOR = 33;

const int ZMQ_EVENT_CONNECTED = 1;

const int ZMQ_EVENT_CONNECT_DELAYED = 2;

const int ZMQ_EVENT_CONNECT_RETRIED = 4;

const int ZMQ_EVENT_LISTENING = 8;

const int ZMQ_EVENT_BIND_FAILED = 16;

const int ZMQ_EVENT_ACCEPTED = 32;

const int ZMQ_EVENT_ACCEPT_FAILED = 64;

const int ZMQ_EVENT_CLOSED = 128;

const int ZMQ_EVENT_CLOSE_FAILED = 256;

const int ZMQ_EVENT_DISCONNECTED = 512;

const int ZMQ_EVENT_MONITOR_STOPPED = 1024;

const int ZMQ_EVENT_ALL = 2047;

const int ZMQ_POLLIN = 1;

const int ZMQ_POLLOUT = 2;

const int ZMQ_POLLERR = 4;

const int ZMQ_POLLITEMS_DFLT = 16;

const int ZMQ_STREAMER = 1;

const int ZMQ_FORWARDER = 2;

const int ZMQ_QUEUE = 3;
